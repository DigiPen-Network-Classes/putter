{
	"info": {
		"version": "2.0",
		"name": "CS261 Assignment 2"
	},
	"item": [
		{
			"name": "Creating a user with POST on users/",
			"item": [
				{
					"name": "Create succeeds with a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return a user ID', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('should return the username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"testUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the password', function() {\r",
									"    pm.expect(jsonData).to.have.property('password');\r",
									"    pm.expect(jsonData.password).to.equal(pm.environment.get(\"testPassword\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.equal(pm.environment.get(\"testAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('ID is not the same as the username', function() {\r",
									"    pm.expect(jsonData.username).to.not.equal(jsonData.id);\r",
									"});\r",
									"\r",
									"pm.test('ID is not the same as the password', function() {\r",
									"    pm.expect(jsonData.password).to.not.equal(jsonData.id);\r",
									"});\r",
									"\r",
									"pm.test('ID is not the same as the avatar', function() {\r",
									"    pm.expect(jsonData.avatar).to.not.equal(jsonData.id);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", jsonData.id);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var digits = '' + Math.floor((Math.random() * 100000));",
									"pm.environment.set(\"testUser\", \"user\" + digits);",
									"pm.environment.set(\"testPassword\", \"password\" + digits);",
									"pm.environment.set(\"testAvatar\", \"avi\" + digits);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/"
						}
					}
				},
				{
					"name": "Create succeeds with distinct second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return a user ID', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('should not have the same user ID as the first user', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.not.equal(pm.environment.get('userId'));\r",
									"});\r",
									"\r",
									"pm.test('should return the correct username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"otherUser\"));\r",
									"});\r",
									"\r",
									"pm.environment.set(\"otherUserId\", jsonData.id);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var digits = '' + Math.floor(Math.random() * 100000);",
									"pm.environment.set(\"otherUser\", \"user\" + digits);",
									"pm.environment.set(\"otherPassword\", \"password\" + digits);",
									"pm.environment.set(\"otherAvatar\", \"avi\" + digits);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{otherUser}}\",\n\"password\": \"{{otherPassword}}\",\n\"avatar\": \"{{otherAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/"
						}
					}
				},
				{
					"name": "Create fails with duplicate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users"
						}
					}
				}
			]
		},
		{
			"name": "Login with POST to login/",
			"item": [
				{
					"name": "Login succeeds with the first user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return a session', function() {\r",
									"    pm.expect(jsonData).to.have.property('session');\r",
									"    pm.expect(jsonData.session).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('user ID and session should not be the same', function() {\r",
									"    pm.expect(jsonData.session).to.not.be.equal(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test('username and session should not be the same', function() {\r",
									"    pm.expect(jsonData.session).to.not.be.equal(pm.environment.get(\"testUser\"));\r",
									"});\r",
									"\r",
									"pm.test('password and session should not be the same', function() {\r",
									"    pm.expect(jsonData.session).to.not.be.equal(pm.environment.get(\"testPassword\"));\r",
									"});\r",
									"\r",
									"pm.environment.set(\"session\", jsonData.session);\r",
									"pm.environment.set(\"originalSession\", jsonData.session);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/login"
						}
					}
				},
				{
					"name": "Login succeeds with a second login with different session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return a session', function() {\r",
									"    pm.expect(jsonData).to.have.property('session');\r",
									"    pm.expect(jsonData.session).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('new session ID is different from old session ID', function() {\r",
									"    pm.expect(jsonData.session).to.not.be.equal(pm.environment.get(\"session\"));\r",
									"});\r",
									"\r",
									"pm.environment.set(\"session\", jsonData.session);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/login"
						}
					}
				},
				{
					"name": "Login succeeds with second user with different session/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return a session', function() {\r",
									"    pm.expect(jsonData).to.have.property('session');\r",
									"    pm.expect(jsonData.session).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('session should not match the first user session', function() {\r",
									"    pm.expect(jsonData.session).to.not.be.equal(pm.environment.get(\"session\"));\r",
									"});\r",
									"\r",
									"pm.environment.set(\"otherSession\", jsonData.session);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{otherUser}}\",\n\"password\": \"{{otherPassword}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/login"
						}
					}
				},
				{
					"name": "Login fails with bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/login"
						}
					}
				},
				{
					"name": "Login fails with bad username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{testUser}}{{testUser}}\",\n\"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/login"
						}
					}
				}
			]
		},
		{
			"name": "Retrieve a user by ID with GET on users/:id",
			"item": [
				{
					"name": "Retrieving the same user succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return test user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"testUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test password', function() {\r",
									"    pm.expect(jsonData).to.have.property('password');\r",
									"    pm.expect(jsonData.password).to.eql(pm.environment.get(\"testPassword\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test user avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"testAvatar\"));\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "Retrieving a different user succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return other user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"otherUserId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"otherUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"otherAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('should not return other password', function() {\r",
									"    pm.expect(jsonData).not.to.have.property('password');\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{otherUserId}}"
						}
					}
				},
				{
					"name": "Retrieving fails with no session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"raw": ""
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "Retrieving fails with bad session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "Retrieving fails with old session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{originalSession}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "Retrieving fails with bad ID (valid session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/xxx{{otherUserId}}xxx"
						}
					}
				},
				{
					"name": "Retrieving fails with bad ID (bad session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/xxx{{otherUserId}}xxx"
						}
					}
				}
			]
		},
		{
			"name": "Searching for a user by name with GET on users",
			"item": [
				{
					"name": "Searching for self succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return test user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"testUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test user avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"testAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test user password', function() {\r",
									"    pm.expect(jsonData).to.have.property('password');\r",
									"});\r",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username={{testUser}}"
						}
					}
				},
				{
					"name": "Searching for a different user succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return other user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"otherUserId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"otherUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"otherAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('should not return other password', function() {\r",
									"    pm.expect(jsonData).not.to.have.property('password');\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username={{otherUser}}"
						}
					}
				},
				{
					"name": "Searching fails with no session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"raw": ""
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username={{otherUser}}"
						}
					}
				},
				{
					"name": "Searching fails with bad session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username={{otherUser}}"
						}
					}
				},
				{
					"name": "Searching fails with bad username (valid session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username=xx{{testUser}}xx"
						}
					}
				},
				{
					"name": "Searching fails with bad username (bad session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username=xx{{testUser}}xx"
						}
					}
				},
				{
					"name": "Searching fails with no username (valid session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users"
						}
					}
				}
			]
		},
		{
			"name": "Updating a user by ID with PUT on users/:id",
			"item": [
				{
					"name": "Updating succeeds with new data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return the new username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"newUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the new password', function() {\r",
									"    pm.expect(jsonData).to.have.property('password');\r",
									"    pm.expect(jsonData.password).to.equal(pm.environment.get(\"newPassword\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the new avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.equal(pm.environment.get(\"newAvatar\"));\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var digits = '' + Math.floor((Math.random() * 100000));",
									"pm.environment.set(\"newUser\", \"user\" + digits);",
									"pm.environment.set(\"newPassword\", \"password\" + digits);",
									"pm.environment.set(\"newAvatar\", \"avi\" + digits);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\",\n\"username\": \"{{newUser}}\",\n\"password\": \"{{newPassword}}\",\n\"avatar\": \"{{newAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "Updating fails on different user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\",\n\"avatar\": \"{{newAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{otherUserId}}"
						}
					}
				},
				{
					"name": "Updating fails with no session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "Updating fails with bad session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}{{session}}\",\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "Updating fails with bad username (valid session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\",\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/xx{{userId}}"
						}
					}
				},
				{
					"name": "Updating fails with bad username (bad session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}{{session}}\",\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/xx{{userId}}"
						}
					}
				},
				{
					"name": "Changes to first user persist after failed calls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return test user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return new username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"newUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return new password', function() {\r",
									"    pm.expect(jsonData).to.have.property('password');\r",
									"    pm.expect(jsonData.password).to.eql(pm.environment.get(\"newPassword\"));\r",
									"});\r",
									"\r",
									"pm.test('should return new avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"newAvatar\"));\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}"
						}
					}
				},
				{
					"name": "No changes to other user after failed calls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return test user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"otherUserId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return original username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"otherUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return original avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"otherAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('should not return password', function() {\r",
									"    pm.expect(jsonData).to.not.have.property('password');\r",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{otherUserId}}"
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "port",
			"value": "3100"
		},
		{
			"key": "address",
			"value": "localhost"
		}
	]
}