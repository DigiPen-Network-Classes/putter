{
	"info": {
		"_postman_id": "a6f07c94-390e-4907-afee-cd8ccf75ca17",
		"name": "CS261 Mongo ID Lab",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Creating a user with POST on users/",
			"item": [
				{
					"name": "Create succeeds with a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return a user ID', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('should return the username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"testUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the password', function() {\r",
									"    pm.expect(jsonData).to.have.property('password');\r",
									"    pm.expect(jsonData.password).to.equal(pm.environment.get(\"testPassword\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.equal(pm.environment.get(\"testAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('ID is not the same as the username', function() {\r",
									"    pm.expect(jsonData.username).to.not.equal(jsonData.id);\r",
									"});\r",
									"\r",
									"pm.test('ID is not the same as the password', function() {\r",
									"    pm.expect(jsonData.password).to.not.equal(jsonData.id);\r",
									"});\r",
									"\r",
									"pm.test('ID is not the same as the avatar', function() {\r",
									"    pm.expect(jsonData.avatar).to.not.equal(jsonData.id);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"userId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var digits = '' + Math.floor((Math.random() * 100000));",
									"pm.environment.set(\"testUser\", \"user\" + digits);",
									"pm.environment.set(\"testPassword\", \"password\" + digits);",
									"pm.environment.set(\"testAvatar\", \"avi\" + digits);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create succeeds with distinct second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return a user ID', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('should not have the same user ID as the first user', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.not.equal(pm.environment.get('userId'));\r",
									"});\r",
									"\r",
									"pm.test('should return the correct username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"otherUser\"));\r",
									"});\r",
									"\r",
									"pm.environment.set(\"otherUserId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var digits = '' + Math.floor(Math.random() * 100000);",
									"pm.environment.set(\"otherUser\", \"user\" + digits);",
									"pm.environment.set(\"otherPassword\", \"password\" + digits);",
									"pm.environment.set(\"otherAvatar\", \"avi\" + digits);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"username\": \"{{otherUser}}\",\n\"password\": \"{{otherPassword}}\",\n\"avatar\": \"{{otherAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fails with duplicate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"username\": \"{{testUser}}\",\n\"password\": \"{{testPassword}}\",\n\"avatar\": \"{{testAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve a user by ID with GET on users/:id",
			"item": [
				{
					"name": "Retrieving the same user succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return test user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"testUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test user avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"testAvatar\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieving a different user succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return other user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"otherUserId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"otherUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"otherAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('should not return other password', function() {\r",
									"    pm.expect(jsonData).not.to.have.property('password');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{otherUserId}}",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"{{otherUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Searching for a user by name with GET on users",
			"item": [
				{
					"name": "Searching for self succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return test user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"userId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"testUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return test user avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"testAvatar\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username={{testUser}}",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "{{testUser}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Searching for a different user succeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return other user id', function() {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"otherUserId\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"otherUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return other avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.eql(pm.environment.get(\"otherAvatar\"));\r",
									"});\r",
									"\r",
									"pm.test('should not return other password', function() {\r",
									"    pm.expect(jsonData).not.to.have.property('password');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"session\": \"{{session}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users?username={{otherUser}}",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "{{otherUser}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Updating a user by ID with PUT on users/:id",
			"item": [
				{
					"name": "Updating succeeds with new data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('should return the new username', function() {\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"newUser\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the new password', function() {\r",
									"    pm.expect(jsonData).to.have.property('password');\r",
									"    pm.expect(jsonData.password).to.equal(pm.environment.get(\"newPassword\"));\r",
									"});\r",
									"\r",
									"pm.test('should return the new avatar', function() {\r",
									"    pm.expect(jsonData).to.have.property('avatar');\r",
									"    pm.expect(jsonData.avatar).to.equal(pm.environment.get(\"newAvatar\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var digits = '' + Math.floor((Math.random() * 100000));",
									"pm.environment.set(\"newUser\", \"user\" + digits);",
									"pm.environment.set(\"newPassword\", \"password\" + digits);",
									"pm.environment.set(\"newAvatar\", \"avi\" + digits);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"session\": \"{{session}}\",\n\"username\": \"{{newUser}}\",\n\"password\": \"{{newPassword}}\",\n\"avatar\": \"{{newAvatar}}\"\n}"
						},
						"url": {
							"raw": "http://{{address}}:{{port}}/api/v1/users/{{userId}}",
							"protocol": "http",
							"host": [
								"{{address}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "port",
			"value": "3100"
		},
		{
			"key": "address",
			"value": "localhost"
		}
	]
}